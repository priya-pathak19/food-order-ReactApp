{"ast":null,"code":"var _jsxFileName = \"E:\\\\work github\\\\food-order-ReactApp\\\\src\\\\store\\\\provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport Context from './context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Provider = props => {\n  _s();\n\n  const defaultState = {\n    items: [],\n    totalAmount: 0\n  };\n\n  const cartReducer = (state, action) => {\n    if (action.type === \"ADD\") {\n      let updatedItems;\n      const index = state.items.findIndex(el => el.id === action.item.id);\n\n      if (index === -1) {\n        updatedItems = [...state.items, action.item];\n      } else {\n        updatedItems = [...state.items];\n        updatedItems[index].amount += action.item.amount;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: state.totalAmount + action.item.price * action.item.amount\n      };\n    }\n\n    if (action.type === \"REMOVE\") {\n      let updatedItems;\n      const index = state.items.findIndex(el => el.id === action.id);\n\n      if (state.items[index].amount === 1) {\n        updatedItems = state.items.filter(el => el.id !== action.id);\n      } else {\n        updatedItems = [...state.items];\n        updatedItems[index].amount -= 1;\n      }\n\n      return {\n        items: updatedItems,\n        totalAmount: state.totalAmount - state.items[index].price\n      };\n    }\n\n    if (action.type === 'CLEAR') {\n      return defaultState;\n    }\n\n    return defaultState;\n  };\n\n  const [cartState, dispatch] = useReducer(cartReducer, defaultState);\n\n  const addItems = item => {\n    dispatch({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItems = id => {\n    dispatch({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatch({\n      type: 'CLEAR'\n    });\n  };\n\n  const newContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItems: addItems,\n    removeItems: removeItems,\n    clearCart: clearCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: newContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Provider, \"4osC0WgHu1gGOOXbMsztYt6VCZk=\");\n\n_c = Provider;\nexport default Provider;\n\nvar _c;\n\n$RefreshReg$(_c, \"Provider\");","map":{"version":3,"sources":["E:/work github/food-order-ReactApp/src/store/provider.js"],"names":["React","useReducer","Context","Provider","props","defaultState","items","totalAmount","cartReducer","state","action","type","updatedItems","index","findIndex","el","id","item","amount","price","filter","cartState","dispatch","addItems","removeItems","clearCartHandler","newContext","clearCart","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport Context from './context';\r\n\r\n\r\nconst Provider = props =>{\r\n\r\n    const defaultState= {\r\n        items:[],\r\n        totalAmount:0\r\n    }\r\n\r\n    const cartReducer = (state, action)=>{\r\n\r\n        if (action.type === \"ADD\") {\r\n            let updatedItems;\r\n            const index = state.items.findIndex(el => el.id === action.item.id);\r\n            if (index === -1) {\r\n               updatedItems = [...state.items, action.item];\r\n            } else {\r\n               updatedItems = [...state.items];\r\n               updatedItems[index].amount += action.item.amount;\r\n            }\r\n       \r\n            return {\r\n               items: updatedItems,\r\n               totalAmount: state.totalAmount + action.item.price * action.item.amount\r\n            };\r\n         }\r\n         if (action.type === \"REMOVE\") {\r\n            let updatedItems;\r\n            const index = state.items.findIndex(el => el.id === action.id);\r\n            if (state.items[index].amount === 1) {\r\n               updatedItems = state.items.filter(el => el.id !== action.id);\r\n            } else {\r\n               updatedItems = [...state.items];\r\n               updatedItems[index].amount -= 1;\r\n            }\r\n       \r\n            return {\r\n               items: updatedItems,\r\n               totalAmount: state.totalAmount - state.items[index].price\r\n            };\r\n         }\r\n\r\n         if (action.type === 'CLEAR') {\r\n            return defaultState;\r\n          }\r\n          return defaultState;\r\n        };\r\n        \r\n    const [cartState, dispatch ]= useReducer(cartReducer, defaultState);\r\n\r\n    const addItems = (item)=>{\r\n        dispatch({type:\"ADD\", item:item})\r\n    }\r\n\r\n    const removeItems = (id)=>{\r\n        dispatch({type:\"REMOVE\", id: id})\r\n    }\r\n\r\n    const clearCartHandler = () => {\r\n        dispatch({type: 'CLEAR'});\r\n      };\r\n\r\n    const newContext = {\r\n        items: cartState.items,\r\n        totalAmount: cartState.totalAmount,\r\n        addItems:  addItems,\r\n        removeItems: removeItems,\r\n        clearCart: clearCartHandler\r\n    };\r\n\r\n    return (\r\n        <Context.Provider value={newContext}>\r\n             {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Provider;"]},"metadata":{},"sourceType":"module"}